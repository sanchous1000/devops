name: CI проекта

on:
  push:
    branches: [main, lab3]
  pull_request:
    branches: [main, lab3]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Настройка доступа к проекту
        run: |
          # Копируем актуальный docker-compose.yml из директории project в корень
          cp project/docker-compose.yml ./docker-compose.yml
          
          # Удаляем устаревший атрибут version из docker-compose.yml
          sed -i '/^version:/d' ./docker-compose.yml

      - name: Сборка Docker образов
        run: |
          # Переходим в директорию project для доступа ко всем файлам проекта
          cd project
          
          # Собираем образы без запуска контейнеров
          docker compose build --no-cache

      - name: Сохранение образов как артефакты
        run: |
          # Сохраняем образы для последующих этапов
          docker save $(docker images -q | grep -v "<none>" | head -n2) -o docker-images.tar

      - name: Загрузка Docker образов как артефакт
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images.tar
          retention-days: 1

  backend-test:
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Установка зависимостей бэкенда
        run: |
          cd project/backend
          python -m pip install -r requirements.txt
          # Устанавливаем pytest для запуска тестов
          python -m pip install pytest pytest-cov

      - name: Запуск тестов backend
        run: |
          # Запускаем только стабильные тесты без зависимостей (как в build.sh)
          cd project/backend
          python -m pytest tests/test_database.py tests/test_minio_storage.py tests/test_model.py tests/test_video_processing.py -v

      - name: Генерация отчета о покрытии бэкенда
        run: |
          cd project/backend
          python -m pytest tests/test_database.py tests/test_minio_storage.py tests/test_model.py tests/test_video_processing.py --cov=app --cov-report=xml

      - name: Загрузка отчета о покрытии бэкенда
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: project/backend/coverage.xml
          if-no-files-found: warn

  frontend-test:
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Настройка Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: project/frontend/package-lock.json

      - name: Установка зависимостей фронтенда
        run: |
          cd project/frontend
          npm ci

      - name: Запуск тестов frontend
        run: |
          # Запускаем только базовые компоненты для тестирования (согласно build.sh)
          cd project/frontend
          npm test -- --run src/utils/axios.test.js --environment jsdom

      - name: Генерация отчета о покрытии фронтенда
        run: |
          cd project/frontend
          npm test -- --coverage src/utils/axios.test.js --environment jsdom
          
      - name: Загрузка отчета о покрытии фронтенда
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: project/frontend/coverage
          if-no-files-found: warn

  publish:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Логин в Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Установка Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Настройка проекта
        run: |
          # Переходим в директорию project и используем docker-compose оттуда
          cd project
          
          # Удаляем устаревший атрибут version из docker-compose.yml
          sed -i '/^version:/d' docker-compose.yml
      
      - name: Загрузка Docker образов
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Загрузка образов в Docker
        run: |
          docker load -i docker-images.tar
      
      - name: Извлечение метаданных (тегов, labels) для Backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/project-backend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
            latest
      
      - name: Сборка и публикация Backend Docker-образа
        uses: docker/build-push-action@v4
        with:
          context: ./project/backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-backend:buildcache,mode=max
      
      - name: Извлечение метаданных (тегов, labels) для Frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/project-frontend
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
            latest
      
      - name: Сборка и публикация Frontend Docker-образа
        uses: docker/build-push-action@v4
        with:
          context: ./project/frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/project-frontend:buildcache,mode=max